COMPILER ProyectoFinal

  string variableName;
  string functionName;
  string signSymbol;

  private ProyectoPruebas.VarTable tab;

  int constCont = 0;

  internal ProyectoPruebas.VarTable Tab { get => Tab1; set => Tab1 = value; }
  internal ProyectoPruebas.VarTable Tab1 { get => tab; set => tab = value; }

CHARACTERS
  Letter = 'A'..'Z' + 'a'..'z'. 
  Digit = '0'..'9'.
  Zero = '0'.
  NonZeroDigit = Digit - Zero.
  CharInLine = ANY - '\r' - '\n'.
  AnyButDoubleQuote = CharInLine - '\"'.
  DoubleQuote = '\"'.

TOKENS
  Id = Letter { Letter | Digit }.
  Program = "program".
  Var = "Var".
  Int = "Int".
  Float = "Float".
  Print = "Print".
  Comma = ','.
  Colon = ':'.
  Semicolon = ';'.
  If = "If".
  Else = "Else".
  ElseIf = "ElseIf".
  EndIf = "EndIf".
  LeftParenthesis = '('.
  RightParenthesis = ')'.
  LeftCurlyBracket = '{'.
  RightCurlyBracket = '}'.
  CTE_I = Zero | (NonZeroDigit { Digit }).
  CTE_F = Digit '.' Digit { Digit }.
  CTE_S = DoubleQuote { AnyButDoubleQuote } DoubleQuote.
  Plus = '+'.
  Minus = '-'.
  Asterisk = '*'.
  Slash = '/'.
  Equal = '='.
  EqualThan = "==".
  GreaterThan = '>'.
  LesserThan = '<'.
  NotEqual = "<>".
  GreaterThanOrEqual = ">=".
  LessThanOrEqual = "<=".
  Function = "Function".
  Void = "Void".
  Return = "Return".
  EndFunction = "EndFunction".
  Bool = "Bool".
  String = "String".
  TurnLeft = "TurnLeft".
  TurnRight = "TurnRight".
  Shoot = "Shoot".
  Wait = "Wait".
  MoveForward = "MoveForward".
  Interact = "Interact".
  For = "For".
  EndFor = "EndFor".
  Loop = "Loop".
  EndLoop = "EndLoop".

IGNORE '\r' + '\n' + '\t' + '\f'

PRODUCTIONS
ProyectoFinal = PROGRAM.

PROGRAM = VARS (.//Se crea el goTo para el main
                tab.codeGenerator.pushGoToMain();.)
        { 
        MODULE

        } 
                (.//Se resuelve el goTo porque ya estamos en el main
                    tab.codeGenerator.solveGoToMain();
                  .)

              (.tab.createContext();.)
        STATUTE 
        {STATUTE}

        (.tab.codeGenerator.endFunction();.)
        .



VARS = {VAR}.

VAR                   
    = Var   (. string name; int type; .)
      TYPE  (. type = t.kind;.)
      Id    (. name =  t.val; 
               ProyectoPruebas.Variable var = new ProyectoPruebas.Variable(name, type);
               tab.addVariable(var);
               tab.codeGenerator.pushSymbolStack(var);
               .)
    Equal     (.  tab.codeGenerator.pushOperatorStack(t.kind);.)
    [SIGNS] 
    (NUMBER | CTE_S) (.     
                            string constNumber = "-";

                            if(signSymbol == "-"){
                              constNumber +=  t.val;
                              signSymbol = "+";
                            }
                            else{
                              constNumber = t.val;
                            }

                            int constType = t.kind;
                            
                            ProyectoPruebas.Variable constVar = new ProyectoPruebas.Variable(constNumber, constType);

                            constVar.setConstant();

                            constVar = tab.addConstant(constVar);

                            tab.codeGenerator.pushSymbolStack(constVar);

                            tab.codeGenerator.solveAssignment();.)
    Semicolon. 

NUMBER = CTE_I 
        | CTE_F.

MODULE = Function       (. string functName; int type;.)
        (TYPE | Void)   (. type = t.kind;.)
        Id              (. functName = t.val; 
                           ProyectoPruebas.Function fun = new ProyectoPruebas.Function(functName, type);
                           tab.addFunction(fun);
                           .)
        PARAMS Colon 
        STATUTE  
          
         
        {STATUTE} 
        
        
        EndFunction (.

                      tab.codeGenerator.endFunction();
          .)
        .
MODULE_RETURN = Return EXPR (.tab.codeGenerator.createReturn();.)
              Semicolon.

PARAMS 
 = LeftParenthesis (.tab.createContext();.)
    [PARAMS_1] RightParenthesis.


PARAMS_1 = TYPE (.int paramType = t.kind;.)
            Id (. 
                  ProyectoPruebas.Variable param = new ProyectoPruebas.Variable(t.val, paramType);
                  tab.addParamToFunction(param);
                .)
            {PARAMS_2}.

PARAMS_2 = Comma 
            TYPE (. int paramType = t.kind;.)
            Id  (. 
                    ProyectoPruebas.Variable param = new ProyectoPruebas.Variable(t.val, paramType);
              
                    tab.addParamToFunction(param);
                  .)
            .
TYPE = Float 
      | Int 
      | String 
      | Bool.

COMMAND = COMMAND_LIST (.tab.codeGenerator.createCommand(t.kind);.)
          Semicolon.

COMMAND_LIST = TurnLeft 
              | TurnRight 
              | Shoot 
              | Wait  
              | MoveForward 
              | Interact 
              | PRINT.

PRINT = Print LeftParenthesis 
          (CTE_S | Id)      (.  ProyectoPruebas.Variable printVar;
                                if(t.kind == _CTE_S){
                                    printVar = new ProyectoPruebas.Variable(t.val, t.kind, t.val);
                                    printVar = tab.addConstant(printVar);
                                    
                                }
                                else{
                                   printVar = tab.findVariable(t.val);
                                }

                                if(printVar == null){
                                    SemErr("Variable " + t.val + " not declared");
                                }
                                else{
                                  tab.codeGenerator.solvePrint(printVar);
                                }
                               .)
         RightParenthesis.

CYCLE = FOR 
        | LOOP.

FOR = For (. tab.codeGenerator.pushJumpStack(tab.codeGenerator.getLineCont() ); .)
      LeftParenthesis EXPRESSION 
      RightParenthesis (. ProyectoPruebas.Variable result = tab.codeGenerator.popSymnbolStack();

                          if(result.getType() != ProyectoPruebas.OperationTypes.TYPE_BOOL){

                              SemErr("Type-mismatch: Expected a bool type operation");
                          }
                          else{

                            tab.codeGenerator.pushGoToF(result);
                          }
                      .)
      STATUTE {STATUTE} 
      EndFor  (. tab.codeGenerator.solveFor(); .)
      .

LOOP = Loop     
      (CTE_I | Id)  (.tab.codeGenerator.createLoopCondition(new ProyectoPruebas.Variable(t.val, t.kind));.) 
      STATUTE {STATUTE} 
      EndLoop   (.tab.codeGenerator.solveLoop();.) 
      .

CONDITION = If LeftParenthesis EXPRESSION 
            RightParenthesis  (. ProyectoPruebas.Variable result = tab.codeGenerator.popSymnbolStack();
                                  if(result.getType() != ProyectoPruebas.OperationTypes.TYPE_BOOL){

                                      SemErr("Type-mismatch: Expected a bool type operation");
                                  }
                                  else{

                                    tab.codeGenerator.pushGoToF(result);
                                  }
                               .)
            STATUTE 
            {STATUTE}  [CONDITION_ELSE] 
            EndIf           (. tab.codeGenerator.popJumpStack();.)
            .
CONDITION_ELSE = ELSE 
                | ELSEIF.
ELSE = Else   (. tab.codeGenerator.popJumpStack();
                         tab.codeGenerator.pushGoTo();
                      .)
 STATUTE {STATUTE}.
ELSEIF = ElseIf LeftParenthesis EXPRESSION RightParenthesis STATUTE {STATUTE} [CONDITION_ELSE].

STATUTE = COMMAND 
          | CONDITION 
          | CYCLE 
          | ASGMT_OR_FUNCT
          | MODULE_RETURN.
          
ASGMT_OR_FUNCT = 
                Id (. variableName = t.val; .)
                (FUNCTCALL | ASSIGNMENT) Semicolon.

FUNCTCALL  = 
            LeftParenthesis (. ProyectoPruebas.Function fun = tab.findFunction(variableName);
                                if(fun == null){
                                    SemErr("Function " + variableName + " not declared");
                                }
                                else{

                                    tab.codeGenerator.functionCall(fun);


                                }.)
            [FUNCT_PARAMS] 
            RightParenthesis  (.
                                  if(!tab.codeGenerator.solveFunction()){

                                    SemErr("Invalid number of arguments");
                                  }

                              .)
            .
FUNCT_PARAMS = EXPR (. 
                          if(!tab.codeGenerator.setFunctParam()){
                              SemErr("Parameters type mismatch");
                          }
                          .)
              {Comma EXPR  (. if(!tab.codeGenerator.setFunctParam()){
                              SemErr("Parameters type mismatch");
                              }
                          .) 
              }.

ASSIGNMENT = 
            Equal (.   ProyectoPruebas.Variable var = tab.findVariable(variableName);
                      if(var == null){
                        SemErr("Variable " + variableName +  " not declared");
                      }
                      else{
                        tab.codeGenerator.pushOperatorStack(t.kind);
                        tab.codeGenerator.pushSymbolStack(var);
                      }
                      .)
            (EXPR | CTE_S)
              (.if(!tab.codeGenerator.solveAssignment()){
                      SemErr("Type-mismatch at assignment");
                }.)
            .

EXPRESSION = EXPR [EXPRESSION_1].
EXPRESSION_1 = RELOPS (.tab.codeGenerator.pushOperatorStack(t.kind);.)
              EXPR
              (. tab.codeGenerator.solveRelOp();.)
              .

RELOPS = EqualThan
        | GreaterThan 
        | GreaterThanOrEqual 
        | LesserThan 
        | LessThanOrEqual 
        | NotEqual.



EXPR = TERM   
              {
              (Plus | Minus)  (.tab.codeGenerator.pushOperatorStack(t.kind);.)
               TERM
                 (. if(!tab.codeGenerator.solveSumAndMinus()){
                      SemErr("Type-mismatch");
                     }

                  .)
               }.

TERM = FACTOR 
      { 
      (Asterisk | Slash)  (.tab.codeGenerator.pushOperatorStack(t.kind);.)
       FACTOR
         (. if(!tab.codeGenerator.solveMultAndDiv()){
                SemErr("Type-mismatch");
            }
          .)
        }
       .

FACTOR = FACTOR_1 
        | FACTOR_2.
FACTOR_1 = LeftParenthesis (.tab.codeGenerator.pushOperatorStack(t.kind);.)
          EXPR
          RightParenthesis  (. tab.codeGenerator.popOperatorStack();.)
          .
FACTOR_2 = [SIGNS] FACTOR_VALUES.
FACTOR_VALUES = Id (. //Variable que guarda el Id que acaba de encontrar
                      variableName = t.val;

                      //Variable que dice si entró a una función o no
                      bool enterFunction = false;.)

                [ (. //Si se ejecuta esta parte es que se reconoció una función
                    enterFunction = true; .)
               
                FUNCTCALL  
                ]  (. //Si no entró a una función, quiere decir que se encontró una variable
                      if(!enterFunction){
                        ProyectoPruebas.Variable varId = tab.findVariable(variableName);
                        if(varId != null){
                           tab.codeGenerator.pushSymbolStack(varId);
                        }
                        else{
                          SemErr("Variable " + variableName + " not declared.");
                        }
                      }.)
                | NUMBER (. string constNumber = "-";
                            if(signSymbol == "-"){
                                constNumber +=  t.val;
                                signSymbol = "+";
                            }
                            else{
                              constNumber = t.val;
                            }
                            
                            int constType = t.kind;
                            
                            ProyectoPruebas.Variable constVar = new ProyectoPruebas.Variable(constNumber, constType);

                            constVar.setConstant();

                            constVar = tab.addConstant(constVar);

                            tab.codeGenerator.pushSymbolStack(constVar);
                          .)
                .
SIGNS = Plus
        | Minus (.signSymbol = "-";.)
        .
	
END ProyectoFinal.